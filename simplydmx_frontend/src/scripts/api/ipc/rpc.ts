// This file is automatically generated by the SimplyDMX plugin framework.
// Please do not edit it manually.

import { callService } from "./agnostic_abstractions";


/**
 * Represents the abstract data for a single light in a layer.
 * A value's binary may be masked if the output is u8 (integer overflow cast)
 */
export type AbstractLayerLight = FxHashMap<string, BlenderValue>;

/**
 * Describes an image to display
 */
export type AssetDescriptor = { BuiltIn: string } | { SVGInline: string };

/**
 * Value to be used in a submaster with instructions for mixing it into the result
 */
export type BlenderValue = "None" | { Static: number } | { Offset: number };

/**
 * This contains data that indicates how a channel should be blended.
 * 
 * It is provided by the fixture description to tweak the properties of a layer's blending function.
 */
export interface BlendingData {
    scheme: BlendingScheme;
    snap: SnapData;
    allow_wrap: boolean;
    max_value: number;
    min_value: number;
}

/**
 * The method in which conflicts are resolved while blending
 */
export type BlendingScheme = "HTP" | "LTP";

/**
 * Information about a specific channel available on the fixture
 */
export interface Channel {
    intensity_emulation: string[] | null;
    size: ChannelSize;
    default?: number;
    ch_type: ChannelType;
}

/**
 * Dictates the size of the output. Values will be stored as the largest of these options, but bounds
 * will be enforced by the UI, mixer, and output will be truncated.
 */
export type ChannelSize = "U8" | "U16";

/**
 * Describes information used for controlling and blending the channel
 */
export type ChannelType = { Segmented: { segments: Segment[]; priority: BlendingScheme; snapping: SnapData | null } } | { Linear: { priority: BlendingScheme } };

/**
 * Contains data about a group of channels that can be controlled using a special controller
 */
export interface ControlGroup {
    name: string | null;
    channels: ControlGroupData;
}

/**
 * Specifies the type of ControlGroup in use and associated channels
 */
export type ControlGroupData = { Intensity: string } | { RGBGroup: { red: string; green: string; blue: string } } | { CMYKGroup: { cyan: string; magenta: string; yellow: string; black: string } } | { PanTilt: { pan: string; tilt: string } } | { Gobo: string } | { ColorWheel: string } | { Zoom: string } | { GenericInput: string };

/**
 * An error that could occur when creating a fixture
 */
export type CreateFixtureError = "FixtureTypeMissing" | "ControllerMissing" | { ErrorFromController: CreateInstanceError };

/**
 * A generic error originating from an OutputDriver interface when creating a fixture instance
 */
export type CreateInstanceError = { InvalidData: string } | { Other: string };

/**
 * A description for a DMX driver
 */
export interface DMXDriverDescription {
    name: string;
    description: string;
    id: string;
}

/**
 * DMX-specific components of a fixture definition.
 * 
 * This goes in the output_info, property of a `FixtureBundle` object
 */
export interface DMXFixtureData {
    personalities: Record<string, DMXPersonalityData>;
}

/**
 * This holds DMX-specific information about a fixture instance
 */
export interface DMXFixtureInstance {
    universe: Uuid | null;
    offset: number | null;
}

/**
 * An error that could occur while initializing the DMX plugin
 */
export type DMXInitializationError = "UnrecognizedData";

/**
 * DMX-specific personality data
 * 
 * This goes inside a `DMXFixtureData` instance
 */
export interface DMXPersonalityData {
    dmx_channel_order: string[];
}

/**
 * The DMX portion of the show file
 */
export interface DMXShowSave {
    library: Record<Uuid, DMXFixtureData>;
    fixtures: Record<Uuid, DMXFixtureInstance>;
    universes: Record<Uuid, UniverseInstance>;
}

/**
 * An error that could occur when removing a fixture
 */
export type DeleteFixtureError = "FixtureMissing" | "FixtureTypeMissing" | "ControllerMissing" | { ErrorFromController: string };

/**
 * Minified representation of a DMX driver for display
 */
export interface DisplayableDMXDriver {
    id: string;
    name: string;
    description: string;
}

/** Describes a value to be shown in a dropdown list */
export interface DropdownOptionJSON {
    name: string;
    description: string | null;
    value: Value;
}

/**
 * The E131 portion of the show file
 */
export interface E131DMXShowSave {
    universes: Record<Uuid, E131Universe>;
}

/**
 * An error that could occur while initializing the E131 plugin
 */
export type E131InitializationError = "UnrecognizedData";

/**
 * E131-specific DMX universe data
 */
export interface E131Universe {
    external_universe: number;
}

/**
 * An error that could occur when creating a fixture
 */
export type EditFixtureError = "FixtureMissing" | "FixtureTypeMissing" | "ControllerMissing" | { ErrorFromController: EditInstanceError };

/**
 * A generic error originating from an OutputDriver interface when editing an existing fixture instance
 */
export type EditInstanceError = { InvalidData: string } | { Other: string };

/** Represents criteria used to filter an event. For example, a submaster UUID could be used to filter submaster updates by that specific submaster */
export type FilterCriteria = { type: "None" } | { type: "String"; data: string } | { type: "Uuid"; data: Uuid };

/**
 * Importable fixture descriptor bundle that includes output driver-specific information
 */
export interface FixtureBundle {
    fixture_info: FixtureInfo;
    output_info: SerializedData;
}

/**
 * Data type that contains generic, protocol-erased information about a fixture such as name,
 * metadata, personalities, and references to services within the output controller.
 */
export interface FixtureInfo {
    id: Uuid;
    name: string;
    short_name: string | null;
    manufacturer: string | null;
    family: string | null;
    metadata: FixtureMeta;
    channels: FxHashMap<string, Channel>;
    personalities: FxHashMap<string, Personality>;
    output_driver: string;
    control_groups: ControlGroup[];
}

/**
 * Identifies an individual instance of a fixture
 */
export interface FixtureInstance {
    id: Uuid;
    fixture_id: Uuid;
    personality: string;
    name: string | null;
    comments: string | null;
    visualization_info: VisualizationInfo;
}

/**
 * Metadata about the fixture, used for display in the UI
 */
export interface FixtureMeta {
    manufacturer: string | null;
    manual_link: string | null;
}

/**
 * Represents the finished, pre-mixed values of a light.
 * 
 * `Attribute ID --> Value`
 */
export type FixtureMixerOutput = FxHashMap<string, number>;

/**
 * Describes a form-style UI using a frontend-agnostic generic data structure
 */
export type FormDescriptor = FormItem[];

/**
 * Describes a dropdown component as part of a form
 */
export interface FormDropdown {
    label: string;
    id: string;
    item_source: FormItemOptionSource;
    value: Value;
}

/**
 * Describes a form element
 */
export type FormItem = { Dynamic: [InteractiveDescription, FormItem[]] } | { Textbox: FormTextbox } | { Number: FormNumber } | { Dropdown: FormDropdown } | { Section: FormSection } | { VerticalStack: FormItem[] } | { HorizontalStack: FormItem[] };

/**
 * Describes a source for dropdown/autocomplete options
 */
export type FormItemOptionSource = { Static: { values: DropdownOptionJSON[] } } | { TypeSpec: { typespec_id: string } };

/**
 * Describes a number input as part of a form
 */
export interface FormNumber {
    label: string;
    id: string;
    validation: NumberValidation;
    value: number | null;
}

/**
 * Describes a visual container for form elements
 */
export interface FormSection {
    label: string;
    form_item: FormItem;
}

/**
 * Describes a textbox as part of a form
 */
export interface FormTextbox {
    label: string;
    id: string;
    value: string | null;
}

/**
 * Represents the full output of the mixer, ready to send out to the lights.
 * 
 * `Fixture ID --> Attribute ID --> Value`
 */
export type FullMixerOutput = FxHashMap<Uuid, FixtureMixerOutput>;

/** This is the same as a HashMap, but uses a more efficient hashing algorithm in the backend */
export type FxHashMap<K extends string | number | symbol, V> = Record<K, V>;

/**
 * An error that could occur while retrieving a fixture creation form
 */
export type GetCreationFormError = "FixtureTypeMissing" | { Other: string };

/**
 * An error that could occur while retrieving a fixture edit form
 */
export type GetEditFormError = "FixtureMissing" | "FixtureDefinitionMissing" | "ControllerMissing" | { ControllerError: string };

/** This type is currently undocumented. I will be working to resolve this for all types in the near future. */
export type GetLinkUniverseFormError = { ErrorFromController: string } | "ControllerNotFound";

/**
 * A generic error originating from an OutputDriver interface when importing a fixture definition
 */
export type ImportError = { InvalidData: string } | { Other: string };

/**
 * An error that could occur when importing a fixture definition
 */
export type ImportFixtureError = "UnknownController" | { ErrorFromController: ImportError };

/**
 * Describes a function that can be used to add interactivity to a form
 */
export type InteractiveDescription = { Not: InteractiveDescription } | { And: InteractiveDescription[] } | { Or: InteractiveDescription[] } | { Equal: { field_name: string; value: Value } };

/**
 * An error that could occur while attempting to call a JSON service
 */
export type JSONCallServiceError = { type: "ServiceNotFound" } | { type: "ArgDeserializationFailed" } | { type: "ResponseSerializationFailed" };

/**
 * Describes a command to be sent via a JSON or equivalent API
 */
export type JSONCommand = { type: "CallService"; message_id: number; plugin_id: string; service_id: string; args: Value[] } | { type: "GetServices"; message_id: number } | { type: "GetOptions"; message_id: number; provider_id: string } | { type: "SendEvent"; name: string; criteria: FilterCriteria | null; data: Value } | { type: "Subscribe"; name: string; criteria: FilterCriteria | null } | { type: "Unsubscribe"; name: string; criteria: FilterCriteria | null };

/**
 * Describes an event to be sent to a client via a JSON or equivalent API
 */
export type JSONResponse = { type: "CallServiceResponse"; message_id: number; result: Value } | { type: "ServiceList"; message_id: number; list: ServiceDescription[] } | { type: "OptionsList"; message_id: number; list: { Ok: DropdownOptionJSON[] } | { Err: TypeSpecifierRetrievalError } } | { type: "CallServiceError"; message_id: number; error: JSONCallServiceError } | { type: "Event"; name: string; criteria: FilterCriteria; data: Value };

/**
 * An error that could occur while linking a DMX universe to a universe controller
 */
export type LinkUniverseError = { ErrorFromController: RegisterUniverseError } | "UniverseNotFound" | "ControllerNotFound";

/**
 * Data used by the mixer to blend submasters and produce a final result
 */
export interface MixerContext {
    default_context: MixingContext;
    frozen_context: MixingContext | null;
    blind_opacity: number;
}

/**
 * An error that could occur while initializing the mixer plugin
 */
export type MixerInitializationError = "UnrecognizedData";

/**
 * Describes a single mixer instance, with its own internal state for driving layers and effects
 * 
 * Multiple instances are used for creating a blind mode
 */
export interface MixingContext {
    layer_order: Uuid[];
    layer_opacities: Record<Uuid, number>;
    user_submaster_order: Uuid[];
    user_submasters: Record<Uuid, StaticLayer>;
}

/**
 * Describes validation criteria for a number input
 */
export type NumberValidation = "None" | { Not: NumberValidation } | { And: NumberValidation[] } | { Or: NumberValidation[] } | { Between: [number, number] } | { DivisibleBy: number };

/**
 * An error that could occur while initializing the E131 plugin
 */
export type OpenDMXInitializationError = "UnrecognizedData";

/**
 * An error that could occur while initializing the patcher plugin
 */
export type PatcherInitializationError = "UnrecognizedData";

/**
 * Identifies non-implementation-specific features of a personality.
 * 
 * Implementation-specific features of a personality such as channel order should
 * should be stored in the output data for use by the output plugin.
 */
export interface Personality {
    available_channels: string[];
}

/**
 * An error returned when registering a saver. This is usually okay to unwrap, since it should be during init
 */
export type RegisterSavableError = "SaverAlreadyExists";

/**
 * An error that occurs while registering a universe
 */
export type RegisterUniverseError = { InvalidData: string } | { Other: string };

/**
 * An error returned by the saver if saving data failed
 */
export type SaveError = { SaverReturnedErr: { error: string } } | { ErrorSerializing: { error: string } } | "Unsafe";

/**
 * Describes the state of the show controller backend during initialization
 */
export type SaverInitializationStatus = "FinishedSafe" | "FinishedUnsafe" | "Initializing";

/**
 * Identifies a segment used in a segmented channel
 */
export interface Segment {
    start: number;
    end: number;
    name: string;
    display: SegmentDisplay;
}

/**
 * Describes how a segment should be displayed to the user in the UI
 */
export type SegmentDisplay = { Gobo: { asset: AssetDescriptor } } | { Color: { red: number; green: number; blue: number } } | { Image: { asset: AssetDescriptor } } | "Other";

/**
 * Data type used to hold a serialized instance of an arbitrary data type.
 * 
 * This is intended to encapsulate dynamically-typed data intended for deserialization by the output plugin
 */
export type SerializedData = number[] | Value;

/** Describes an argument that must be passed to a service call */
export interface ServiceArgumentOwned {
    id: string;
    description: string;
    val_type: string;
    val_type_hint: string | null;
}

/** Describes a service that can be called from an external API */
export interface ServiceDescription {
    plugin_id: string;
    id: string;
    name: string;
    description: string;
    arguments: ServiceArgumentOwned[];
    returns: ServiceArgumentOwned | null;
}

/**
 * Sharable (and serializable) component of the patcher state containing
 * information about registered fixtures
 */
export interface SharablePatcherState {
    library: FxHashMap<Uuid, FixtureInfo>;
    fixture_order: Uuid[];
    fixtures: FxHashMap<Uuid, FixtureInstance>;
}

/**
 * Describes an entire show file containing fragments from every plugin
 */
export interface ShowFile {
    plugin_data: Record<string, number[]>;
}

/**
 * This indicates if a value should snap to a new value. This is useful for things like gobos, where
 * intermediate values don't blend, and can instead cause distraction by rapidly switching between noticably
 * discrete states.
 */
export type SnapData = "NoSnap" | { SnapAt: number };

/**
 * Defines a static submaster
 */
export interface StaticLayer {
    name: string;
    values: SubmasterData;
}

/**
 * Represents the data within a submaster used for blending
 */
export type SubmasterData = FxHashMap<Uuid, AbstractLayerLight>;

/** Describes an error that occurred while retrieving items for a dropdown list */
export type TypeSpecifierRetrievalError = "SpecifierNotFound" | "SerializationError";

/**
 * This represents a DMX universe instance
 */
export interface UniverseInstance {
    id: Uuid;
    name: string;
    controller: string | null;
}

/** Unique identifier used in various parts of the API. In TS, UUID does not have its own data type, so this just re-exports string. */
export type Uuid = string;

/** Represents Rust's `serde_json::Value` type. This is used for dynamic typing, like when using backend-defined forms. */
export type Value = any;

/** This type is currently undocumented. I will be working to resolve this for all types in the near future. */
export interface VisualizationInfo {
    x: number;
    y: number;
}


export const core = {
	/** Log a message somewhere useful */
	log(msg: string): Promise<void> { return callService("core", "log", [msg]) },
	/** Log an error that needs to be addressed */
	log_error(msg: string): Promise<void> { return callService("core", "log_error", [msg]) },
};

export const mixer = {
	/** Commits all changes made in blind mode, deleting the previous look. Changes are made instantly. Use `set_blind_opacity` to fade. */
	commit_blind(): Promise<void> { return callService("mixer", "commit_blind", []) },
	/** Creates a new submaster that can be used for blending */
	create_layer(name: string): Promise<Uuid> { return callService("mixer", "create_layer", [name]) },
	/** Deletes a layer from the registry */
	delete_layer(submaster_id: Uuid): Promise<boolean> { return callService("mixer", "delete_layer", [submaster_id]) },
	/** Copies the default layer bin to a new one with 0 opacity, setting it as the new default. */
	enter_blind_mode(): Promise<void> { return callService("mixer", "enter_blind_mode", []) },
	/** Gets the opacity of the blind layer */
	get_blind_opacity(): Promise<number | null> { return callService("mixer", "get_blind_opacity", []) },
	/** Retrieves the contents of a layer */
	get_layer_contents(submaster_id: Uuid): Promise<StaticLayer | null> { return callService("mixer", "get_layer_contents", [submaster_id]) },
	/** Gets the opacity of a layer (Optionally within a specific bin) */
	get_layer_opacity(submaster_id: Uuid): Promise<number | null> { return callService("mixer", "get_layer_opacity", [submaster_id]) },
	/** Lists all user-created layers (submasters) */
	list_submasters(): Promise<[Uuid, string][]> { return callService("mixer", "list_submasters", []) },
	/** Renames a submaster */
	rename_layer(submaster_id: Uuid, new_name: string): Promise<void> { return callService("mixer", "rename_layer", [submaster_id, new_name]) },
	/** Manually requests the mixer to blend layers and emit new output */
	request_blend(): Promise<void> { return callService("mixer", "request_blend", []) },
	/** Reverts all changes made in blind mode. Changes are made instantly. Use `set_blind_opacity` to fade. */
	revert_blind(): Promise<void> { return callService("mixer", "revert_blind", []) },
	/** Sets the opacity of the blind layer */
	set_blind_opacity(opacity: number): Promise<void> { return callService("mixer", "set_blind_opacity", [opacity]) },
	/** Adds or removes content in a layer */
	set_layer_contents(submaster_id: Uuid, submaster_delta: SubmasterData): Promise<boolean> { return callService("mixer", "set_layer_contents", [submaster_id, submaster_delta]) },
	/** Sets the opacity of a layer (Optionally within a specific bin) */
	set_layer_opacity(submaster_id: Uuid, opacity: number, auto_insert: boolean): Promise<boolean> { return callService("mixer", "set_layer_opacity", [submaster_id, opacity, auto_insert]) },
};

export const output_dmx = {
	/** Creates a new, unlinked universe for DMX output */
	create_universe(name: string): Promise<Uuid> { return callService("output_dmx", "create_universe", [name]) },
	/** Deletes an existing universe, unlinking any associated lights or controllers */
	delete_universe(universe_id: Uuid): Promise<void> { return callService("output_dmx", "delete_universe", [universe_id]) },
	/** Gets a form for linking a universe */
	get_link_universe_form(driver_id: string, universe_id: Uuid | null): Promise<{ Ok: FormDescriptor } | { Err: GetLinkUniverseFormError }> { return callService("output_dmx", "get_link_universe_form", [driver_id, universe_id]) },
	/** Gets the ID of the controller linked to a universe */
	get_linked_controller(universe_id: Uuid): Promise<string | null> { return callService("output_dmx", "get_linked_controller", [universe_id]) },
	/** Links an existing universe to a DMX driver */
	link_universe(universe_id: Uuid, driver: string, form_data: SerializedData): Promise<{ Ok: null } | { Err: LinkUniverseError }> { return callService("output_dmx", "link_universe", [universe_id, driver, form_data]) },
	/** List the DMX device drivers registered with the DMX output driver */
	list_drivers(): Promise<DMXDriverDescription[]> { return callService("output_dmx", "list_drivers", []) },
	/** Lists the universes registered in the DMX driver */
	list_universes(): Promise<[Uuid, string][]> { return callService("output_dmx", "list_universes", []) },
	/** Renames a universe */
	rename_universe(universe_id: Uuid, universe_name: string): Promise<void> { return callService("output_dmx", "rename_universe", [universe_id, universe_name]) },
	/** Unlinks an existing universe from its driver */
	unlink_universe(universe_id: Uuid): Promise<void> { return callService("output_dmx", "unlink_universe", [universe_id]) },
};

export const patcher = {
	/** Creates a new fixture in the patcher */
	create_fixture(fixture_type: Uuid, personality: string, name: string | null, comments: string | null, form_data: SerializedData): Promise<{ Ok: Uuid } | { Err: CreateFixtureError }> { return callService("patcher", "create_fixture", [fixture_type, personality, name, comments, form_data]) },
	/** Deletes a fixture from the patcher */
	delete_fixture(fixture_id: Uuid): Promise<{ Ok: null } | { Err: DeleteFixtureError }> { return callService("patcher", "delete_fixture", [fixture_id]) },
	/** Edits the requested fixture using data provided by the user */
	edit_fixture(instance_id: Uuid, personality: string, name: string | null, comments: string | null, form_data: SerializedData): Promise<{ Ok: null } | { Err: EditFixtureError }> { return callService("patcher", "edit_fixture", [instance_id, personality, name, comments, form_data]) },
	/** Edits the x,y coordinates of the fixture within the visualizer */
	edit_fixture_placement(fixture_id: Uuid, x: number, y: number): Promise<void> { return callService("patcher", "edit_fixture_placement", [fixture_id, x, y]) },
	/** Queries the given fixture's driver for a fixture creation form to display */
	get_creation_form(fixture_type: Uuid): Promise<{ Ok: FormDescriptor } | { Err: GetCreationFormError }> { return callService("patcher", "get_creation_form", [fixture_type]) },
	/** Queries the given fixture's driver for a fixture edit form to display */
	get_edit_form(fixture_id: Uuid): Promise<{ Ok: FormDescriptor } | { Err: GetEditFormError }> { return callService("patcher", "get_edit_form", [fixture_id]) },
	/** Retrieves the current state of the patcher, with libraries, registered fixtures, etc. */
	get_patcher_state(): Promise<SharablePatcherState> { return callService("patcher", "get_patcher_state", []) },
	/** Import a fixture definition */
	import_fixture(fixture_bundle: FixtureBundle): Promise<{ Ok: null } | { Err: ImportFixtureError }> { return callService("patcher", "import_fixture", [fixture_bundle]) },
};

export const saver = {
	/** Saves the show, returning the raw byte vector */
	save(): Promise<{ Ok: number[] } | { Err: SaveError }> { return callService("saver", "save", []) },
};

